#!/bin/bash

# Ensure Homebrew env is set
eval "$({{ template "homebrew-prefix" . }}/bin/brew shellenv)"

printf '\nSetup SSH keys\n\n'

PUBLIC_KEY_FILE="$HOME/.ssh/id_ed25519.pub"

# Check for SSH keys presence and validity
if [ ! -f "$PUBLIC_KEY_FILE" ]; then
  # Collect machine metadata for proper key title
  COMPUTER_NAME="$(scutil --get ComputerName)"
  SERIAL_NUMBER="$(ioreg -c IOPlatformExpertDevice -d 2 | awk -F\" '/IOPlatformSerialNumber/{print $(NF-1)}')"

  # Check if computer name includes serial number, if not â€“ append it
  if [[ $COMPUTER_NAME != *"$SERIAL_NUMBER"* ]]; then
    SERIAL_NUMBER_STRING=" ($SERIAL_NUMBER)"
  else
    SERIAL_NUMBER_STRING=""
  fi

  KEY_TITLE="$COMPUTER_NAME$SERIAL_NUMBER_STRING"

  # Sign in to 1Password account
  eval $(op signin)

  # Check for existing key pair in 1Password
  KEY_OUTPUT="$(op item get "$KEY_TITLE" --format=json)"
  KEY_FOUND=$?

  if [ $KEY_FOUND -eq 0 ]; then
    echo "Found existing SSH key pair \"$KEY_TITLE\""
  else
    echo "Generating new SSH key pair \"$KEY_TITLE\""
    KEY_OUTPUT="$(op item create --category ssh --title "$KEY_TITLE" --format json)"
  fi

  # Get public key contents from 1Password output
  PUBLIC_KEY="$(printf '%s\n' "$KEY_OUTPUT" | jq -r '.fields[] | select(.id == "public_key") | .value')"

  echo "Writing SSH public key to $PUBLIC_KEY_FILE"
  echo "$PUBLIC_KEY" > "$PUBLIC_KEY_FILE"
  chmod 644 "$PUBLIC_KEY_FILE"

  if [ $KEY_FOUND -ne 0 ]; then
    echo "Adding new SSH public key to GitHub account"
    gh ssh-key add "$PUBLIC_KEY_FILE" --title "$KEY_TITLE" --type authentication
    gh ssh-key add "$PUBLIC_KEY_FILE" --title "$KEY_TITLE" --type signing
  fi
fi
